<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chris Eldredge]]></title>
  <link href="http://chriseldredge.github.com/atom.xml" rel="self"/>
  <link href="http://chriseldredge.github.com/"/>
  <updated>2012-07-24T09:28:29-07:00</updated>
  <id>http://chriseldredge.github.com/</id>
  <author>
    <name><![CDATA[Chris Eldredge]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unit of Work & Eventual Consistency]]></title>
    <link href="http://chriseldredge.github.com/blog/2012/07/24/Unit-of-Work-and-Eventual-Consistency/"/>
    <updated>2012-07-24T00:00:00-07:00</updated>
    <id>http://chriseldredge.github.com/blog/2012/07/24/Unit-of-Work-and-Eventual-Consistency</id>
    <content type="html"><![CDATA[<p><em>Lucene.Net.Linq is available on the NuGet Gallery at <a href="http://nuget.org/packages/Lucene.Net.Linq">http://nuget.org/packages/Lucene.Net.Linq</a>.</em></p>

<p>Recent versions of Lucene.Net.Linq added support for the <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html">Unit of Work</a> pattern.</p>

<p>The standard Unit of Work has methods like <code>registerNew</code> and <code>registerDeleted</code>, but I decided to use more generic
names that make the interface appear more like a simple collection of documents.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">ISession</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IDisposable</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Query</span><span class="p">();</span>
</span><span class='line'>  <span class="k">void</span> <span class="nf">Add</span><span class="p">(</span><span class="k">params</span> <span class="n">T</span><span class="p">[]</span> <span class="n">items</span><span class="p">);</span>
</span><span class='line'>  <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="k">params</span> <span class="n">T</span><span class="p">[]</span> <span class="n">items</span><span class="p">);</span>
</span><span class='line'>  <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="k">params</span> <span class="n">Query</span><span class="p">[]</span> <span class="n">items</span><span class="p">);</span>
</span><span class='line'>  <span class="k">void</span> <span class="nf">DeleteAll</span><span class="p">();</span>
</span><span class='line'>  <span class="k">void</span> <span class="nf">Commit</span><span class="p">();</span>
</span><span class='line'>  <span class="k">void</span> <span class="nf">Rollback</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Delete</code> method that takes one or more <code>Query</code> objects is a case special to Lucene.Net. This is an escape hatch
for when you want to delete one or more documents without first retrieving them. For example, you may want to delete all documents that
match a query like <code>type:person</code>. I have mixed feelings about this escape hatch, because it smells like a
<a href="http://c2.com/cgi/wiki?LeakyAbstraction">Leaky Abstraction</a>. On the other hand, since it is an overload to a more abstract method,
I think it makes sense from a performance standpoint.</p>

<p>Anyway, one notable method pair is missing from the interface: <code>registerDirty</code> and <code>registerClean</code>. That&#8217;s because
the session does some book keeping behind the scenes to automatically detect dirty documents when the session is committed.</p>

<p>This makes using Lucene.Net.Linq as a <a href="http://martinfowler.com/eaaCatalog/repository.html">Repository</a> dead simple, and makes the code
look nice and clean in the client:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">ChangeMailingAddress</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">newAddress</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">session</span> <span class="p">=</span> <span class="n">provider</span><span class="p">.</span><span class="n">OpenSession</span><span class="p">&lt;</span><span class="n">SampleDocument</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">using</span> <span class="p">(</span><span class="n">session</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">Query</span><span class="p">().</span><span class="n">Single</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'>      <span class="n">person</span><span class="p">.</span><span class="n">MailingAddress</span> <span class="p">=</span> <span class="n">newAddress</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Document Tracking</h2>

<p>So how does it work?</p>

<p>When you ask for an IQueryable from session, the session attaches an instance of IRetrievedDocumentTracker to the queryable before
returning it. That internal interface has only one method call:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">void</span> <span class="nf">TrackDocument</span><span class="p">(</span><span class="n">T</span> <span class="n">item</span><span class="p">,</span> <span class="n">T</span> <span class="n">hiddenCopy</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the LuceneQueryExecutor starts returning results one item at a time, if it detects that a document tracker has been attached,
it makes two copies of each result. One is returned to the client and the other is passed only to the tracker as a hidden copy.
This gives the library the ability to compare pristine objects that came from the index unmodified with ones that may have been
modified with the client.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">var</span> <span class="n">i</span> <span class="p">=</span> <span class="n">skipResults</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">hits</span><span class="p">.</span><span class="n">ScoreDocs</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">doc</span> <span class="p">=</span> <span class="n">hits</span><span class="p">.</span><span class="n">ScoreDocs</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">doc</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">score</span> <span class="p">=</span> <span class="n">hits</span><span class="p">.</span><span class="n">ScoreDocs</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">score</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">var</span> <span class="n">item</span> <span class="p">=</span> <span class="n">ConvertDocument</span><span class="p">(</span><span class="n">searcher</span><span class="p">.</span><span class="n">Doc</span><span class="p">(</span><span class="n">doc</span><span class="p">),</span> <span class="n">score</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">tracker</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">copy</span> <span class="p">=</span> <span class="n">ConvertDocument</span><span class="p">(</span><span class="n">searcher</span><span class="p">.</span><span class="n">Doc</span><span class="p">(</span><span class="n">doc</span><span class="p">),</span> <span class="n">score</span><span class="p">);</span>
</span><span class='line'>      <span class="n">tracker</span><span class="p">.</span><span class="n">TrackDocument</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">copy</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">itemHolder</span><span class="p">.</span><span class="n">Current</span> <span class="p">=</span> <span class="n">item</span><span class="p">;</span>
</span><span class='line'>  <span class="k">yield</span> <span class="k">return</span> <span class="nf">projector</span><span class="p">(</span><span class="n">itemHolder</span><span class="p">.</span><span class="n">Current</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, when the session is committed, all tracked documents are compared with their hidden copies (using reflection) to detect
which documents were modified. Modified documents are written back to the index.</p>

<h2>Eventual Consistency</h2>

<p>The concepts of eventual consitency describe what expectations a client may have about the ordering and visibility of writes in
a distributed asynchronous persistence system. Werner Vogels has written about different
<a href="http://www.allthingsdistributed.com/2008/12/eventually_consistent.html">consistency definitions</a>.</p>

<p>Since the unit of work in Lucene.Net.Linq is implemented by an interface named ISession, it would have been nice to provide
Session Consistency. It&#8217;s open to some interpretation if this behavior is achieved or not. Since the underlying Lucene engine
will not make changes visible to an IndexReader until a commit happens and the IndexReader is reopened, it is difficult or
impossible to allow a client to see the effects of adding, deleting or modifying a document in subsequent queries within the same
session. However, this problem can be side-stepped by simply calling <code>Commit</code> between making changes and subsequent queries.
Calling <code>Commit</code> explicitly may have drawbacks if the client will make further changes and wishes for those changes to
appear atomically. Knowing the details of when staged changes become visible will help clients to make changes smartly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speeding Up NuGet.Server]]></title>
    <link href="http://chriseldredge.github.com/blog/2012/07/03/Speeding-Up-NuGet-Server/"/>
    <updated>2012-07-03T00:00:00-07:00</updated>
    <id>http://chriseldredge.github.com/blog/2012/07/03/Speeding-Up-NuGet-Server</id>
    <content type="html"><![CDATA[<p><em>(Get the source code at <a href="https://github.com/themotleyfool/NuGet">https://github.com/themotleyfool/NuGet</a>)</em></p>

<p>Last time I wrote about creating a LINQ provider for Lucene.Net, and today I&#8217;ll talk about integrating that provider
with NuGet. The existing server part of the NuGet codebase is a drop-in replacement for using local file-system based
feeds. I wanted to try to preserve that turnkey advantage but improve the performance of various queries.</p>

<p>In order to make sure that my improvements were up to snuff, I set up a private mirror of all packages on <a href="http://nuget.org/">nuget.org</a>,
which turned out to be 44,193 packages at the time, for a total size of over 20 gigs.</p>

<p>If you try hitting ~/api/v2/Packages on stock NuGet.Server, you&#8217;ll find that your request just spins and spins. And spins. In fact
it took so long that I gave up waiting for the application to initialize. In the background, the server is finding all <code>*.nupkg</code>
files in ~/Packages and calculating a hash of the contents. Needless to say, it can take a while to run a checksum algorithm on 20gb
of data.</p>

<p>Switching over to my custom lucene branch, the first time the site is started, it scans the Packages folder and finds all packages
that haven&#8217;t been indexed by Lucene. The site homepage helpfully tells you the current status, such as &#8220;Indexing 2113 of 44193 new packages.&#8221;
An ajax timer refreshes the info every few seconds so progress can be easily tracked.</p>

<p>The packages don&#8217;t begin to appear in the feed until they&#8217;ve all been indexed. So this isn&#8217;t much better than stock NuGet.Server.</p>

<h2>Incremental Indexing</h2>

<p>The real improvements are appreciated after the initial index is built.</p>

<pre><code>[celdredge@localhost]$ appcmd recycle apppool nuget
"nuget" successfully recycled

[celdredge@localhost]$ time wget -O /dev/null http://localhost/api/v2/Packages

(snip)

real    0m3.230s
user    0m0.062s
sys     0m0.125s
</code></pre>

<p>This means that you don&#8217;t have to worry much about IIS shutting down the application during idle times. The index gets loaded and ready to go
in a matter of seconds. Vast improvement over stock NuGet.Server.</p>

<p>While that happens, a background thread scans the Packages folder to see what might have changed while the application was stopped. New, modified
and deleted packages are synchronized with the Lucene index. The sycnhronization process takes about 25 seconds to scan 44,193 package files
split into 6,180 folders and calculate the differences with the Lucene index. That&#8217;s pretty fast.</p>

<p>After the application finishes this initial scan, a FileSystemWatcher monitors the Packages folder to synchronize any changes in real time.
This allows the index to stay in sync when new packages appear, even if they are copied into the folder instead of using <code>nuget push</code>.</p>

<h2>Superfast Search</h2>

<p>All sorts of complex queries are possible, and they execute in very reasonable time. I used <a href="http://www.linqpad.net/">LINQPad</a> to
construct various test queries, like this one that finds packages whose id contain lucene but do not start with lucene:</p>

<pre><code>from p in Packages
where p.Id.Contains("Lucene")
where !p.Id.StartsWith("Lucene")
where p.IsLatestVersion
orderby p.Id descending
select p

Query successful (00:00.136)
</code></pre>

<p>136ms is pretty respectable, IMO.</p>

<p>Another advantage to using Lucene is how queries are analyzed. Term queries will match various word forms, so a query like <tt>build</tt> will
match packages that use any words like build, builds, building, built, etc. It is also possible to search for phrase queries, such as
<tt>&#8220;glue them back together&#8221;</tt>. That query matches only one package that contains the exact phrase, whereas on nuget.org you&#8217;ll get
all kinds of results.</p>

<h2>Other Features</h2>

<p>The <a href="https://github.com/NuGet/NuGetGallery/wiki/Tab-Completion-API-Endpoints">Tab Completion API Endpoints</a> introduced in NuGet 2.0 have
been implemented, bringing fast results to users of the Package Manager Console.</p>

<h2>Conclusion</h2>

<p>It has taken a substantial amount of time and effort to implement Lucene.Net.Linq and integrate it with NuGet.Server, but the results
have proven to be worth the investment.</p>

<p>Lucene.Net.Linq has become a fairly mature, though still nascent, project now available on <a href="http://nuget.org/packages/Lucene.Net.Linq">nuget.org</a>. There are a few other
OSS projects that attempt to do what it does, but I think it is already one of the best.</p>

<p>Binaries of NuGet.Server + Lucene can be downloaded from <a href="https://github.com/themotleyfool/NuGet/downloads">https://github.com/themotleyfool/NuGet/downloads</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing LINQ to Lucene]]></title>
    <link href="http://chriseldredge.github.com/blog/2012/05/08/Introducing-Linq-to-Lucene/"/>
    <updated>2012-05-08T00:00:00-07:00</updated>
    <id>http://chriseldredge.github.com/blog/2012/05/08/Introducing-Linq-to-Lucene</id>
    <content type="html"><![CDATA[<p><em>(Get the source code at <a href="https://github.com/themotleyfool/Lucene.Net.Linq">https://github.com/themotleyfool/Lucene.Net.Linq</a>)</em></p>

<p>For the last several weeks I&#8217;ve been working with <a href="http://octopusdeploy.com/">OctopusDeploy</a>, a new one-click deployment
system for .net applications and websites. The way you get your software into Octopus is by publishing packages to
a <a href="http://nuget.org/">NuGet</a> feed. Octopus will monitor the feed, grab your package, send it out to the servers that will
host your software, then instruct the servers to unzip the package and run your deployment scripts.</p>

<p>We&#8217;re pretty happy with Octopus, but we ran into a problem with our NuGet feed. Since we use continuous integration, we
produce 10 or 20 builds a day and each one of those successful builds becomes a release candidate that we want to be
available in Octopus. We found that as we published more packages to our internal feed, the slower Octopus became when
accessing it. It doesn&#8217;t help that some of our packages are 40mb websites.</p>

<p>Thinking that the stateless nature of a file-based NuGet feed might be the culprit, we switched over to
<a href="https://nuget.org/packages/NuGet.Server">NuGet.Server</a>, an asp.net web app that provides access to NuGet packages over http.
As it turns out, NuGet.Server isn&#8217;t significantly better at handling lots of packages or even a handful of rather large packages.</p>

<p>The reason is because NuGet.Server doesn&#8217;t actually cache much information about packages, so each time a client executes a query,
the server has to:</p>

<ul>
<li>Enumerate all <code>*.nupkg</code> files on the file system</li>
<li>Open the zip file and

<ul>
<li>Seek to the nuspec metadata entry</li>
<li>Parse the entry</li>
</ul>
</li>
<li>Obtain file metadata (last modified date, size)</li>
<li>Calculate a checksum hash of the file contents (bigger package, slower hash time)</li>
</ul>


<p>One thing NuGet.Server does that a file-based feed does not is cache some of this metadata (like the hash code), but this
is an in-memory cache, meaning that when the web app restarts or is shutdown after an idle period, the entire cache goes away.</p>

<p>Even with the cache, operations like finding the latest version of a package or sorting packages by name are much slower than
they could be. Not to mention, the &#8220;search&#8221; functionality leaves something to be desired.</p>

<h2>Hooray for Open Source</h2>

<p>I set out to make NuGet.Server faster and I wanted to do it with something light weight. Something that can index and search,
but doesn&#8217;t require a database and all the complexity that comes with it. If I wanted all that I could have just used
<a href="https://github.com/NuGet/NuGetGallery">NuGet Gallery</a>.</p>

<p>I decided to use <a href="http://incubator.apache.org/lucene.net/">Lucene.Net</a> as my data source, but looking at the existing NuGet code,
I realized that NuGet uses <a href="http://www.odata.org">OData</a> to expose a queryable data source over the web. That sounds nice and all,
but in the server side in asp.net, that basically means you need an implementation of <code>IQueryable&lt;T&gt;</code>. Those can
be hard to come by.</p>

<h2>Boo for OData, LINQ and IQueryable</h2>

<p>Exposing a search/query interface over the web powered by Lucene is not hard to do. Exposing an OData compatible endpoint powered
by Lucene is so insanely complicated that I have to conclude that OData is a cruel joke for anyone not using Entity Framework (and
if you are using EF, the joke was already on you).</p>

<p>OData sounds great in that the types of queries a client can construct are limitless. But in practice, NuGet does not need this
insane amount of power. Really all that is needed is a simple interface that lets you enumerate packages in some pre-defined
ways.</p>

<p>But since NuGet has a large install base that is using OData, it was time to try to connect <code>IQueryable&lt;T&gt;</code> with Lucene.</p>

<p>There is already a <a href="http://linqtolucene.codeplex.com/">LINQ to Lucene</a> project on CodePlex, but after working with it I found that
it does not support enough of the LINQ expressions to work seamlessly with OData.</p>

<p>So I decided to try and write my own.</p>

<h2>Introducing Lucene.Net.Linq</h2>

<p><a href="https://github.com/themotleyfool/Lucene.Net.Linq">Lucene.Net.Linq</a> is the result of my quest to make NuGet.Server faster.
The library is incomplete and the features it does support were motivated by making it compatible enough with OData in general
and NuGet.Server in particular.</p>

<p>This project turned out to be even more needlessly complex due to the way Microsoft&#8217;s WCF Data Services <a href="http://msdn.microsoft.com/en-us/library/dd723653.aspx">Reflection Provider</a>
tries to avoid <code>NullReferenceException</code> by turning simple queries into completely insane ones. This is a problem that the
NuGet Gallery folks also <a href="http://blog.davidebbo.com/2011/08/how-odata-quirk-killed-nuget-server.html">ran into</a>.</p>

<p>So a large part of Lucene.Net.Linq jumps through hoops because the Reflection Provider takes a simple OData query like:</p>

<pre>
Packages()?$filter=startswith(Id,'foo')
</pre>


<p>And turns it into a complex query like:</p>

<pre>
IIF(
  (IIF(([package].Id == null), null, Convert([package].Id.StartsWith("r"))) == null),
   False,
   Convert(IIF(([package].Id == null), null, Convert([package].Id.StartsWith("foo")))))
</pre>


<p>And hands that off to the poor IQueryable implementor to make sense of. At the end of the
day this query ends up being converted to a Lucene PrefixQuery such as:</p>

<pre>
Id:foo*
</pre>


<p>All of this could have been avoided if the WCF Data Services <a href="http://msdn.microsoft.com/en-us/library/dd723653.aspx">Reflection Provider</a>
would let clients set <a href="http://msdn.microsoft.com/en-us/library/system.data.services.providers.idataservicequeryprovider.isnullpropagationrequired.aspx">IsNullPropagationRequired</a>
to <code>false</code>.</p>

<h2>Conclusion</h2>

<p><a href="https://github.com/themotleyfool/Lucene.Net.Linq">Lucene.Net.Linq</a> was written for a very specific purpose,
but it could be generally useful for plugging Lucene into
places that already use LINQ to execute queries and to expose Lucene indexes over OData (but don&#8217;t use OData; you&#8217;re better than that).</p>

<p>We hope you find it useful!</p>

<p>To comply with the different licenses of Lucene.Net and <a href="http://relinq.codeplex.com/">re-linq</a>, the library is co-licensed under the
terms of the <a href="http://www.gnu.org/licenses/lgpl-2.1-standalone.html">LGPL</a>
and <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License</a>.</p>

<p>Look for this library at NuGet.org soon!</p>

<p>Get the source code at <a href="https://github.com/themotleyfool/Lucene.Net.Linq">https://github.com/themotleyfool/Lucene.Net.Linq</a>.</p>

<p>Up next: releasing a blazingly fast NuGet feed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lucene NumericField Gotcha]]></title>
    <link href="http://chriseldredge.github.com/blog/2012/04/19/Lucene-NumericField-Gotcha/"/>
    <updated>2012-04-19T00:00:00-07:00</updated>
    <id>http://chriseldredge.github.com/blog/2012/04/19/Lucene-NumericField-Gotcha</id>
    <content type="html"><![CDATA[<p>Today I ran into an interesting problem using
<a href="https://svn.apache.org/repos/asf/incubator/lucene.net/trunk/src/core/Document/NumericField.cs">NumericField</a>.</p>

<p>The issue is that when a document is retrieved, fields encoded using NumericField come back as plain old
strings.  This isn&#8217;t a problem by itself, but if you retrieve a document, modify some fields and leave
others alone, any unmodified field that was previously a NumericField reverts to a basic string value.</p>

<p>The issue is demonstrated by this sample NUnit test fixture:</p>

<script src="https://gist.github.com/2425347.js"> </script>


<p>Long story short, if your documents are going to take round trips and get re-indexed, you must re-encode
any NumericFields before adding the document back to the index, even if they did not change.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Re-linq]]></title>
    <link href="http://chriseldredge.github.com/blog/2012/03/29/Getting-Started-With-Relinq/"/>
    <updated>2012-03-29T00:00:00-07:00</updated>
    <id>http://chriseldredge.github.com/blog/2012/03/29/Getting-Started-With-Relinq</id>
    <content type="html"><![CDATA[<h2>The IQueryable Conundrum</h2>

<p>So, you have a datasource you can access from .net and you thought, hey wouldn&#8217;t it be
cool if I could wire this up with LINQ?</p>

<p>Maybe you&#8217;ve read about how <a href="http://blog.ploeh.dk/2012/03/26/IQueryableIsTightCoupling.aspx">IQueryable is Tight Coupling</a>,
but you figure that you&#8217;re connecting up a low-level datasource and you&#8217;ll probably encapsulate the messy IQueryable stuff
in your domain. So you forge ahead.</p>

<p>You create a class that implements IQueryable, maybe using
<a href="http://msdn.microsoft.com/en-us/library/bb546158.aspx">Walkthrough: Creating an IQueryable LINQ Provider</a>
as a starting point.</p>

<p>Now you&#8217;re left with an Expression object and you get to figure out what to do with it. Sure, you
can use reflection like the MSDN example demonstrates, but some lingering doubt enters in when you
realize how complex even the most basic statements will be to parse.</p>

<p>Then maybe you find a new resource: <a href="http://blogs.msdn.com/b/mattwar/archive/2008/11/18/linq-links.aspx">LINQ: Building an IQueryable provider series</a>
and you think, hey, only 17 massive posts to trudge through.</p>

<p>Ok, so this is no work for the weary. No wonder we don&#8217;t have scads of LINQ providers floating around on codeplex.com and codeproject.com.</p>

<h2>Enter re-linq</h2>

<p><a href="http://relinq.codeplex.com/">re-linq</a> is an open source project that attempts to ease the burden of implementing IQueryable.</p>

<p>It seems like a great project that should help you write less code, but there&#8217;s just one problem: re-linq has zero documentation.</p>

<p>Their project page links to the tantalizingly friendly example <a href="http://www.codeproject.com/Articles/42059/re-linq-ishing-the-Pain-Using-re-linq-to-Implement">re-linq|ishing the Pain: Using re-linq to Implement a Powerful LINQ Provider on the Example of NHibernate</a>,
but after you download the code you realize soon enough that the project is outdated and doesn&#8217;t even compile against re-linq 1.13.</p>

<p>Alas, you have one demo project to go on as supplied in the re-linq source bundle: Linq.LinqToSqlAppender. Needlesstosay,
this project is arguably more complex than the actual support library it builds on. For someone trying to get started, looking
at a provider that generates SQL queries is probably a little too complex of a starting point.</p>

<h2>The Bare Bones</h2>

<p>Submitted for your entertainment, here lies the recipe for the most basic shell you can use to build upon re-linq.</p>

<p>First, create a new c# project.  Then using Nuget or going on your own, grab a copy of Remotion.Linq
(In the Package Manager Coneole, type <tt>Install-Package Remotion.Linq</tt>)</p>

<p>One you have your project ready, here&#8217;s your code:</p>

<script src="https://gist.github.com/2246429.js"> </script>


<p>This implementation completely ignores the &#8220;where&#8221; clause, &#8220;order&#8221; clause, and any other clause you can
name besides &#8220;select&#8221;.  It just returns the entire collection of items in the data source.</p>

<p>Up next, translating the where clause.</p>
]]></content>
  </entry>
  
</feed>
