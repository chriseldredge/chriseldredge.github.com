<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: odata | Chris Eldredge]]></title>
  <link href="http://chris.eldredge.io/blog/categories/odata/atom.xml" rel="self"/>
  <link href="http://chris.eldredge.io/"/>
  <updated>2018-02-01T09:12:16-05:00</updated>
  <id>http://chris.eldredge.io/</id>
  <author>
    <name><![CDATA[Chris Eldredge]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Default Streams with WebApi OData]]></title>
    <link href="http://chris.eldredge.io/blog/2014/04/29/Default-Streams/"/>
    <updated>2014-04-29T16:07:00-04:00</updated>
    <id>http://chris.eldredge.io/blog/2014/04/29/Default-Streams</id>
    <content type="html"><![CDATA[<p>NuGet package feeds provide metadata about packages, but after searching
for new packages to use or updates to existing ones, we also have to
be able to download the actual package.</p>

<p>The NuGet OData implementation provides links to download a package
by using the <code>default stream</code> concept.</p>

<p>In WCF Data Services, an entity indicates that it has a stream using the
aptly named <code>HasStreamAttribute</code>.</p>

<p>```c#
[DataServiceKey("Id", "Version")]
[HasStream]
public class DataServicePackage : IEquatable<DataServicePackage>
{</p>

<pre><code>//snip
</code></pre>

<p>}
```</p>

<p>To build a URI for each instance, a custom implementation of
<code>IDataServiceStreamProvider</code> is wired into our <code>DataService</code>.</p>

<p>This is done differently in WebApi which does not include the
<code>HasStreamAttribute</code> at all.</p>

<p>Over a year ago, I asked on twitter:</p>

<p><div class='embed tweet'><blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://twitter.com/adjames?ref_src=twsrc%5Etfw">@adjames</a> Is there a webapi/odata equivalent of HasStreamAttribute and IDataServiceStreamProvider?</p>&mdash; Chris Eldredge (@creldredge) <a href="https://twitter.com/creldredge/status/289384233141669888?ref_src=twsrc%5Etfw">January 10, 2013</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div></p>

<p>At the time, the answer was no. However, I'm happy to report that
recent versions of WebApi do support this feature.</p>

<p>First, we need to tell our EDM model builder that the entity has
a default stream:</p>

<p>```c#
public void MapODataRoutes(HttpConfiguration config)
{</p>

<pre><code>var builder = new ODataConventionModelBuilder();

var entity = builder.EntitySet&lt;ODataPackage&gt;("Packages");
entity.EntityType.HasKey(pkg =&gt; pkg.Id);
entity.EntityType.HasKey(pkg =&gt; pkg.Version);

var entityType = model
  .FindDeclaredType(typeof(ODataPackage).FullName);

model = builder.GetEdmModel();
model.SetHasDefaultStream(
   entityType as IEdmEntityType, hasStream: true);

// snip
</code></pre>

<p>}
```</p>

<p>Next we'll need to implement a custom <code>ODataSerializerProvider</code>
and <code>ODataEdmTypeSerializer</code> to provide a default stream URL for
entity instances:</p>

<p>```c#
public class ODataPackageDefaultStreamAwareSerializerProvider</p>

<pre><code>: DefaultODataSerializerProvider
</code></pre>

<p>{</p>

<pre><code>private readonly ODataEdmTypeSerializer entitySerializer;

public ODataPackageDefaultStreamAwareSerializerProvider()
{
    this.entitySerializer =
      new ODataPackageDefaultStreamAwareEntityTypeSerializer(this);
}

public override ODataEdmTypeSerializer GetEdmTypeSerializer(
  IEdmTypeReference edmType)
{
    if (edmType.IsEntity())
    {
        return entitySerializer;
    }

    return base.GetEdmTypeSerializer(edmType);
}
</code></pre>

<p>}</p>

<p>public abstract class DefaultStreamAwareEntityTypeSerializer<T></p>

<pre><code>: ODataEntityTypeSerializer where T : class
</code></pre>

<p>{</p>

<pre><code>protected DefaultStreamAwareEntityTypeSerializer(
  ODataSerializerProvider serializerProvider)
    : base(serializerProvider)
{
}

public override ODataEntry CreateEntry(
  SelectExpandNode selectExpandNode,
  EntityInstanceContext entityInstanceContext)
{
    var entry = base.CreateEntry(selectExpandNode,
      entityInstanceContext);

    var instance = entityInstanceContext.EntityInstance as T;

    if (instance != null)
    {
        var link = BuildLinkForStreamProperty(
          instance, entityInstanceContext);

        entry.MediaResource = new ODataStreamReferenceValue
        {
            ContentType = ContentType,
            ReadLink = new Uri(link)
        };
    }
    return entry;
}

protected virtual string ContentType
{
    get { return "application/octet-stream"; }
}

protected abstract string BuildLinkForStreamProperty(
  T entity,
  EntityInstanceContext entityInstanceContext);
</code></pre>

<p>}</p>

<p>public class ODataPackageDefaultStreamAwareEntityTypeSerializer : DefaultStreamAwareEntityTypeSerializer<ODataPackage>
{</p>

<pre><code>public ODataPackageDefaultStreamAwareEntityTypeSerializer(
  ODataSerializerProvider serializerProvider)
  : base(serializerProvider)
{
}

protected override string BuildLinkForStreamProperty(
  ODataPackage package,
  EntityInstanceContext context)
{
    var url = new UrlHelper(context.Request);
    var routeParams = new { package.Id, package.Version };
    return url.Link(RouteNames.Packages.Download, routeParams);
}

protected override string ContentType
{
    get { return "application/zip"; }
}
</code></pre>

<p>}
```</p>

<p>The most relevant part above is the override of <code>CreateEntry</code>
(line 33) which sets the <code>MediaResource</code> property on the
serialized <code>ODataEntry</code>.</p>

<p>Finally the custom serializer is wired into the configuration:</p>

<p>```c#
config.Formatters.InsertRange(0,</p>

<pre><code>ODataMediaTypeFormatters.Create(
    new ODataPackageDefaultStreamAwareSerializerProvider(),
    new DefaultODataDeserializerProvider()));
</code></pre>

<p>```</p>

<p>This whole mess of code nets us a modest customization in the Atom
output from WebApi OData:</p>

<p>```xml
<entry>
  <id>http://example/api/odata/Packages(Id='Lucene.Net.Linq',Version='3.2.55')</id>
  &lt;content</p>

<pre><code>type="application/zip"
src="http://example/api/packages/Lucene.Net.Linq/3.2.55/content"/&gt;
</code></pre>

<p>  <!-- snip -->
</entry>
```</p>

<p>This enables the NuGet client to download packages.</p>

<p><nav>
  <h3>Series Index</h3>
  <ol>
  <li><a href="/blog/2014/04/22/NuGet-Feed-with-WebApi-OData/">Introduction</a></li>
  <li><a href="/blog/2014/04/23/Basic-WebApi-OData/">Basic WebApi OData</a></li>
  <li><a href="/blog/2014/04/24/Composite-Keys/">Composite Keys</a></li>
  <li><a href="/blog/2014/04/29/Default-Streams/">Default Streams</a></li>
  </ol>
</nav>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Composite Keys with WebApi OData]]></title>
    <link href="http://chris.eldredge.io/blog/2014/04/24/Composite-Keys/"/>
    <updated>2014-04-24T11:28:00-04:00</updated>
    <id>http://chris.eldredge.io/blog/2014/04/24/Composite-Keys</id>
    <content type="html"><![CDATA[<p>In our basic configuration we told the model builder that
our entity has a composite key comprised of an ID and a
version:</p>

<p>```c#
public void MapDataServiceRoutes(HttpConfiguration config)
{</p>

<pre><code>var builder = new ODataConventionModelBuilder();

var entity = builder.EntitySet&lt;ODataPackage&gt;("Packages");
entity.EntityType.HasKey(pkg =&gt; pkg.Id);
entity.EntityType.HasKey(pkg =&gt; pkg.Version);

// snip
</code></pre>

<p>}
```</p>

<p>This is enough for our OData feed to render <code>edit</code> and <code>self</code>
links for each individual entity in a form like:</p>

<pre><code>http://localhost/odata/Packages(Id='Sample',Version='1.0.0')
</code></pre>

<p>But if we navigate to this URL, instead of getting just this one
entity by key, we get back the entire entity set.</p>

<p>To get the correct behavior, first we need an override on our
PackagesODataController that gets an individual entity instance
by key:</p>

<p>```c#
public class PackagesODataController : ODataController
{</p>

<pre><code>public IMirroringPackageRepository Repository { get; set; }

public IQueryable&lt;ODataPackage&gt; Get()
{
    return Repository.GetPackages().Select(p =&gt; p.ToODataPackage()).AsQueryable();
}

public IHttpActionResult Get(
    [FromODataUri] string id,
    [FromODataUri] string version)
{
    var package = Repository.FindPackage(id, version);

    return package == null
      ? (IHttpActionResult)NotFound()
      : Ok(package.ToODataPackage());
}
</code></pre>

<p>}
```</p>

<p>However, out of the box WebApi OData doesn't know how to bind
composite key parameters to an action such as this, since
the key is comprised of multiple values.</p>

<p>We can fix this by creating a new routing convention that
binds the stuff inside the parenthesis to our route data map:</p>

<p>```c#
public class CompositeKeyRoutingConvention : IODataRoutingConvention
{</p>

<pre><code>private readonly EntityRoutingConvention entityRoutingConvention =
    new EntityRoutingConvention();

public virtual string SelectController(
    ODataPath odataPath,
    HttpRequestMessage request)
{
    return entityRoutingConvention
      .SelectController(odataPath, request);
}

public virtual string SelectAction(
    ODataPath odataPath,
    HttpControllerContext controllerContext,
    ILookup&lt;string, HttpActionDescriptor&gt; actionMap)
{
    var action = entityRoutingConvention
        .SelectAction(odataPath, controllerContext, actionMap);

    if (action == null)
    {
        return null;
    }

    var routeValues = controllerContext.RouteData.Values;

    object value;
    if (!routeValues.TryGetValue(ODataRouteConstants.Key,
      out value))
        {
          return action;
        }

    var compoundKeyPairs = ((string)value).Split(',');

    if (!compoundKeyPairs.Any())
    {
        return null;
    }

    var keyValues = compoundKeyPairs
        .Select(kv =&gt; kv.Split('='))
        .Select(kv =&gt;
          new KeyValuePair&lt;string, object&gt;(kv[0], kv[1]));

    routeValues.AddRange(keyValues);

    return action;
}
</code></pre>

<p>}
```</p>

<p>This class decorates a standard <code>EntityRoutingConvention</code>
and splits the raw key portion of the URI into key/value pairs
and adds them all to the routeValues dictionary.</p>

<p>Once this is done the standard action resolution kicks in
and finds the correct action overload to invoke.</p>

<p>This routing convention was adapted from the WebApi
<a href="http://aspnet.codeplex.com/SourceControl/changeset/view/9cb7243bd9fe3b2df484bf2409af943f39533588#Samples/WebApi/ODataCompositeKeySample/ODataCompositeKeySample/Extensions/CompositeKeyRoutingConvention.cs">ODataCompositeKeySample</a>
project.</p>

<p>Here we see another difference between WebApi OData and WCF
Data Services. In WCF Data Services, the framework handles
generating a query that selects a single instance from
an <code>IQueryable</code>. This limits our ability to customize
how finding an instance by key is done. In WebApi OData,
we have to explicitly define an overload that gets an
entity instance by key, giving us more control over
how the query is executed.</p>

<p>This distinction might not matter for most projects, but
in the case of <a href="https://github.com/themotleyfool/NuGet.Lucene/tree/master/source/NuGet.Lucene.Web">NuGet.Lucene.Web</a>,
it enables a mirror-on-demand
capability where a local feed can fetch a package from another
server on the fly, add it to the local repository, then
send it back to the client as if it was always there in the
first place.</p>

<p>To customize this in WCF Data Services required
significant <a href="https://github.com/themotleyfool/NuGet.Lucene/blob/v2.9.4/source/NuGet.Lucene.Web/DataServices/PackageDataSource.cs#L17">back</a>
<a href="https://github.com/themotleyfool/NuGet.Lucene/blob/v2.9.4/source/NuGet.Lucene.Web/DataServices/PackageDataService.cs#L171">flips</a>.</p>

<p><nav>
  <h3>Series Index</h3>
  <ol>
  <li><a href="/blog/2014/04/22/NuGet-Feed-with-WebApi-OData/">Introduction</a></li>
  <li><a href="/blog/2014/04/23/Basic-WebApi-OData/">Basic WebApi OData</a></li>
  <li><a href="/blog/2014/04/24/Composite-Keys/">Composite Keys</a></li>
  <li><a href="/blog/2014/04/29/Default-Streams/">Default Streams</a></li>
  </ol>
</nav>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic WebApi OData]]></title>
    <link href="http://chris.eldredge.io/blog/2014/04/23/Basic-WebApi-OData/"/>
    <updated>2014-04-23T11:28:00-04:00</updated>
    <id>http://chris.eldredge.io/blog/2014/04/23/Basic-WebApi-OData</id>
    <content type="html"><![CDATA[<p>Getting started on making a NuGet compatible OData feed with WebApi OData,
we'll start with the simplest parts to get on our feet.</p>

<h2>OData Controller</h2>

<p>```c#
public class PackagesODataController : ODataController
{</p>

<pre><code>public IMirroringPackageRepository Repository { get; set; }

[Queryable(PageSize = 100, HandleNullPropagation = HandleNullPropagationOption.False)]
public IQueryable&lt;ODataPackage&gt; Get()
{
    return Repository.GetPackages().Select(p =&gt; p.ToODataPackage()).AsQueryable();
}
</code></pre>

<p>}
```</p>

<p>This controller exposes an entity set of package metadata. The underlying
entity type <code>IPackage</code> has some complex types that OData doesn't play well
with, so the types are decorated with <code>ToODataPackage</code> which flattens
and simplifies the metadata into primitive types like strings, bools
and ints.</p>

<p>The <code>QueryableAttribute</code> exposes some very useful settings that allow us to
enable or disable advanced querying options like <code>$select</code>, <code>$expand</code>,
<code>$orderby</code> and others that can be used to lock down the endpoint to avoid
overly expensive or invalid queries from being executed.</p>

<p><code>HandleNullPropagation</code> is a much welcomed offering that wasn't easily
tweakable before. It tells the engine whether or not the underlying query
execution engine can handle null values in expressions. The default is
to modify query expressions dynamically to put null-check conditions around
all comparisons and operations like <code>ToLowerCase()</code>, <code>Contains()</code> and such.
This is necessary for LINQ to Collections, but generally not necessary for
other LINQ implementations.</p>

<p>Null Propagation seems like a prudent default,
but it can cause performance problems. David Ebbo <a href="http://blog.davidebbo.com/2011/08/how-odata-quirk-killed-nuget-server.html">wrote</a>
about an issue the NuGet Gallery team encountered. If your LINQ provider
doesn't need it, you should definitely turn it off.</p>

<h2>Configuration</h2>

<p>```c#
public void MapDataServiceRoutes(HttpConfiguration config)
{</p>

<pre><code>var builder = new ODataConventionModelBuilder();

var entity = builder.EntitySet&lt;ODataPackage&gt;("Packages");
entity.EntityType.HasKey(pkg =&gt; pkg.Id);
entity.EntityType.HasKey(pkg =&gt; pkg.Version);

var conventions = ODataRoutingConventions.CreateDefault()
    .Select(c =&gt; (IODataRoutingConvention)
      new ControllerAliasingODataRoutingConvention(
        c, "Packages", "PackagesOData"));

config.Routes.MapODataRoute(
    RouteNames.Packages.Feed,
    ODataRoutePath,
    builder.GetEdmModel(),
    new DefaultODataPathHandler(),
    conventions);
</code></pre>

<p>}
```</p>

<p>This is mostly a vanilla configuration but already there are two modifications.</p>

<p>First, the <code>Packages</code> entity set has a composite key that uniquely identifies
each entity instance, comprised of a package ID and version.</p>

<p>The next tweak is that we're customizing the default list of OData routing
conventions, wrapping each one with <code>ControllerAliasingODataRoutingConvention</code>.</p>

<p>My project already has a <code>PackagesController</code> that inherits from <code>ApiController</code>.
I wanted to put OData related methods in a separate controller and name it
<code>PackagesODataController</code>, but still have my entity set be named <code>Packages</code>.</p>

<p>```c#
public class ControllerAliasingODataRoutingConvention : IODataRoutingConvention
{</p>

<pre><code>private readonly IODataRoutingConvention delegateRoutingConvention;
private readonly string controllerAlias;
private readonly string targetControllerName;

public ControllerAliasingODataRoutingConvention(
    IODataRoutingConvention delegateRoutingConvention,
    string controllerAlias,
    string targetControllerName)
{
    this.delegateRoutingConvention = delegateRoutingConvention;
    this.controllerAlias = controllerAlias;
    this.targetControllerName = targetControllerName;
}

public string SelectController(ODataPath odataPath, HttpRequestMessage request)
{
    var controller = delegateRoutingConvention.SelectController(odataPath, request);
    return string.Equals(controller, controllerAlias,
            StringComparison.OrdinalIgnoreCase)
        ? targetControllerName
        : controller;
}

public string SelectAction(
    ODataPath odataPath,
    HttpControllerContext controllerContext,
    ILookup&lt;string, HttpActionDescriptor&gt; actionMap)
{
    return delegateRoutingConvention.SelectAction(
      odataPath, controllerContext, actionMap);
}
</code></pre>

<p>}
```</p>

<p>This is a basic decorator that renames a standard controller name with a desired
target name.</p>

<h2>Summary</h2>

<p>At this point we have a WebApi endpoint that speaks OData. We can enumerate
packages, filter, order and page. We're still pretty far from something that
a NuGet client can speak to though.</p>

<p><nav>
  <h3>Series Index</h3>
  <ol>
  <li><a href="/blog/2014/04/22/NuGet-Feed-with-WebApi-OData/">Introduction</a></li>
  <li><a href="/blog/2014/04/23/Basic-WebApi-OData/">Basic WebApi OData</a></li>
  <li><a href="/blog/2014/04/24/Composite-Keys/">Composite Keys</a></li>
  <li><a href="/blog/2014/04/29/Default-Streams/">Default Streams</a></li>
  </ol>
</nav>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Feed with WebApi OData]]></title>
    <link href="http://chris.eldredge.io/blog/2014/04/22/NuGet-Feed-with-WebApi-OData/"/>
    <updated>2014-04-22T10:25:00-04:00</updated>
    <id>http://chris.eldredge.io/blog/2014/04/22/NuGet-Feed-with-WebApi-OData</id>
    <content type="html"><![CDATA[<p>NuGet uses OData to provide package data to its clients. In
<a href="/blog/2012/03/29/Getting-Started-With-Relinq/">previous posts</a>
I've written about implementing Lucene.Net.Linq and the difficulty
of implementing <code>IQueryable&lt;T&gt;</code> and leaky abstractions and such.</p>

<p>The NuGet core team has more or less acknowledged that OData is overkill
for the types of operations the client needs (list, search, find updates),
and they're even <a href="https://github.com/NuGet/NuGetGallery/issues/595">planning</a>
on migrating away from OData in v3 of their HTTP api.</p>

<p>Unfortunately (or fortunately?) NuGet has achieved wide adoption using
the existing api, so it will take years for everyone to update their clients
once this new api has shipped.</p>

<p>In the mean time, we're stuck with OData.</p>

<p>To make the most of the situation, I wanted to try out the new WebApi
integrated OData packages. These packages allow us to use the same base classes
and infrastructure as regular WebApi controllers. They also enable us
to build and deploy self-hosted applications to decouple us from IIS.</p>

<p>WebApi OData has seen lots of features get implemented and adds supports
for newer protocol versions of OData. However, there are a few things that
the NuGet clients require that are not built in. This series will
go over configuring WebApi OData to create a NuGet compatible package feed.</p>

<h2>Required Features</h2>

<p>OData is a huge standard and NuGet uses only a subset of capabilities.
Here's a list of what we'll need to support:</p>

<ul>
<li>Entity Sets</li>
<li>Composite Keys</li>
<li>Actions</li>
<li>Default Streams</li>
<li>$count meta-action</li>
<li>$filter</li>
<li>$orderby</li>
<li>Paging with $top and $skip</li>
</ul>


<p>Most of these capabilities are built into WebApi OData.
The ones that aren't will be covered in the following articles.</p>

<p><nav>
  <h3>Series Index</h3>
  <ol>
  <li><a href="/blog/2014/04/22/NuGet-Feed-with-WebApi-OData/">Introduction</a></li>
  <li><a href="/blog/2014/04/23/Basic-WebApi-OData/">Basic WebApi OData</a></li>
  <li><a href="/blog/2014/04/24/Composite-Keys/">Composite Keys</a></li>
  <li><a href="/blog/2014/04/29/Default-Streams/">Default Streams</a></li>
  </ol>
</nav>
</p>
]]></content>
  </entry>
  
</feed>
